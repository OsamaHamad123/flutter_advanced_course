# android/fastlane/Fastfile
require 'fileutils'
default_platform(:android)

platform :android do
  desc "Build flavored appbundle/apk and distribute to Firebase App Distribution"
  lane :firebase_distribution do |options|
    workspace = ENV['GITHUB_WORKSPACE'] || Dir.pwd
    UI.message("workspace=#{workspace}")
    skip_build = ENV["SKIP_BUILD"] == "true" || ENV["SKIP_BUILD"] == "1"
    UI.message("SKIP_BUILD=#{ENV['SKIP_BUILD']}")

    def run_cmd(ws, cmd, log)
      begin
        sh("cd #{ws} && #{cmd} > #{log} 2>&1")
        return true
      rescue => e
        UI.message("#{cmd} failed (see #{log}): #{e.message}")
        return false
      end
    end

    unless skip_build
      begin
        sh("cd #{workspace} && flutter clean")
      rescue => _e
        UI.message("flutter clean failed, continuing")
      end

      log_dir = File.join(workspace, "build")
      log_path = File.join(log_dir, "flutter_build.log")
      FileUtils.mkdir_p(log_dir)

      build_ok = false

      # try appbundle with likely flavor names (match your launch.json and build.gradle)
      %w[production Production development Development].each do |fl|
        break if build_ok
        UI.message("try aab flavor: #{fl}")
        build_ok = run_cmd(workspace, "flutter build appbundle --flavor #{fl} --release -v", log_path)
      end

      unless build_ok
        UI.message("try default aab")
        build_ok = run_cmd(workspace, "flutter build appbundle --release -v", log_path)
      end

      unless build_ok
        UI.message("fallback to apk builds")
        %w[production Production development Development].each do |fl|
          break if build_ok
          build_ok = run_cmd(workspace, "flutter build apk --flavor #{fl} --release -v", log_path)
        end
        unless build_ok
          build_ok = run_cmd(workspace, "flutter build apk --release -v", log_path)
        end
      end

      unless build_ok
        UI.message("builds failed. tail #{log_path} if exists")
        if File.exist?(log_path)
          begin
            sh("tail -n 200 #{log_path} || true")
          rescue => _e
            UI.message("cannot tail log")
          end
        end
        UI.user_error!("build failed. inspect #{log_path}")
      end
    else
      UI.message("SKIP_BUILD=true, expecting artifacts under #{File.join(workspace,'build')}")
    end

    # collect candidates
    aab_candidates = Dir.glob(File.join(workspace, "android", "app", "build", "outputs", "bundle", "**", "*.aab")) +
                     Dir.glob(File.join(workspace, "build", "**", "*.aab"))
    apk_candidates = Dir.glob(File.join(workspace, "android", "app", "build", "outputs", "apk", "**", "*.apk")) +
                     Dir.glob(File.join(workspace, "build", "**", "*.apk"))

    aab_candidates.uniq!
    apk_candidates.uniq!

    UI.message("APK candidates: #{apk_candidates.join(', ')}")
    UI.message("AAB candidates: #{aab_candidates.join(', ')}")

    chosen_apk = apk_candidates.last
    chosen_aab = aab_candidates.last

    if chosen_apk && File.exist?(chosen_apk)
      UI.message("uploading APK #{chosen_apk}")
      firebase_app_distribution(
        app: ENV["FIREBASE_APP_ID"],
        apk_path: chosen_apk,
        groups: ENV["FIREBASE_GROUPS"] || "qa",
        release_notes: ENV["RELEASE_NOTES"] || "CI build"
      )
    elsif chosen_aab && File.exist?(chosen_aab)
      UI.message("uploading AAB #{chosen_aab}")
      firebase_app_distribution(
        app: ENV["FIREBASE_APP_ID"],
        aab_path: chosen_aab,
        groups: ENV["FIREBASE_GROUPS"] || "qa",
        release_notes: ENV["RELEASE_NOTES"] || "CI build"
      )
    else
      UI.message("no artifact found. list outputs for diagnosis")
      begin
        sh("ls -la #{File.join(workspace,'android','app','build','outputs')} || true")
        sh("ls -la #{File.join(workspace,'build')} || true")
      rescue => _e
        UI.message("cannot list outputs")
      end
      UI.user_error!("No APK or AAB produced.")
    end
  end
end
